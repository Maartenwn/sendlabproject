var mongoose = require('mongoose');
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var cors = require('cors');
var swaggerJsdoc = require('swagger-jsdoc');
var swaggerUi = require('swagger-ui-express')

var zonnebootSchema = require('./Schemas/ZonnebootSchema');
var testDeviceSchema = require('./Schemas/TestSchema.js');

const swaggerOptions = {
  swaggerDefinition: {
    info: {
      title: 'Test API',
      version: '1.0.0',
      description: 'Test Express API with autogenerated swagger doc',
    },
  },
  apis: ['api.js', 'ZonnebootSchema.js'],
};

const schemas = {
  'zonneboot-001': mongoose.model('zonneboot', zonnebootSchema.zonneboot),
  'test_device-001': mongoose.model('test_device',testDeviceSchema.testdata)
}

const specs = swaggerJsdoc(swaggerOptions);

app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));

const options = {
  allowedHeaders: ["Origin", "X-Requested-With", "Content-Type", "Accept", "X-Access-Token"],
  credentials: true,
  methods: "GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE",
  origin: "*",
  preflightContinue: false
};


app.use(cors(options));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

mongoose.connect('mongodb://172.18.0.2:27017/sendlab', { useNewUrlParser: true });
console.log(mongoose.connection.readyState + "database" );

//var zonnebootModel = mongoose.model('Zonneboot', zonnebootSchema.Zonneboot);

/**
 * @swagger
 * /:
 *    get:
 *      summary: Test Endpoint
 *      description: This should return hello world
 *      produces: 
 *        - application/json
 *      responses:
 *        200:
 *         summary: Ok 
 */
app.get('/', (req, res) => {
  res.send('Hello World');
});

app.post('/zonneboot', (req, res) => {
  var data = new zonnebootModel(req.body);
  console.log(data);
  data.save();
  res.status(200).json(data);
  console.log("Saved");
})

const saveData = function (data) {
  var identifier = data.identifier.split('/')[0];
  var model = schemas[identifier];
  if (!(model === undefined)) {
    var data = new model(data.data);
    data.save((err, data) => {
      if (err) {
        console.log(err.message);
      }
      console.log(data);
    });
  } else {
    console.log({ "Error": "Identifier not found" });
  }
}

const getCurrentData = function (deviceID) {
  console.log(deviceID);
  var identifier = deviceID;
  if (deviceID.includes('/')) {
    var splits = identifier.split('/');
    identifier = splits[0];
    var subdoc = splits[1];
  }
  console.log(identifier);
  console.log(subdoc)

  var model = schemas[identifier]
  if (!(model === undefined)) {
    model.find({}).sort({ _id: -1 }).limit(1).exec(function (err, data) {
      if (subdoc !== "")
        console.log(data[0][subdoc]);
      else
        return (data);
    });
  } else {
    console.log("Rekt");
  }

}

app.post('/data', (req, res) => {
  var identifier = req.body.identifier;
  var model = schemas[identifier];
  if (!(model === undefined)) {
    var data = new model(req.body.data);
    data.save((err, data) => {
      if (err) {
        res.status(400).json(err.message);
      }
      res.status(200).json(data);
    });
  } else {
    res.status(400).json({ "Error": "Identifier not found" });
  }
})


module.exports = {
  saveData,
  getCurrentData
}